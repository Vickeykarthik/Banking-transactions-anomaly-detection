# -*- coding: utf-8 -*-
"""Untitled53.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QsaRhE4MzdSn5XguEy9oVD5JOoWhF-zF
"""

import datetime

class Customer:
    def __init__(self, cust_name, account_number):
        self.Cust_name = cust_name
        self.Account_number = account_number
        self.balance = 0
        self.transaction_history = []
        self.is_flagged = False

    def deposit(self, amount):
        self.balance += amount
        transaction = Transaction("Deposit", amount)
        self.transaction_history.append(transaction)
        print(f"{self.Cust_name} deposited ${amount}")

    def withdrawal(self, amount):
        if amount > self.balance:
            print("Insufficient funds")
            return
        self.balance -= amount
        transaction = Transaction("Withdrawal", amount)
        self.transaction_history.append(transaction)
        print(f"{self.Cust_name} withdrew ${amount}")

    def __str__(self):
        status = "Flagged" if self.is_flagged else "Active"
        return f"Name: {self.Cust_name}, Balance: {self.balance}, Status: {status}, Account Number: {self.Account_number}"


class Transaction:
    def __init__(self, transaction_type, amount):
        self.transaction_type = transaction_type
        self.amount = amount
        self.timestamp = datetime.datetime.now()

    def __str__(self):
        return f"{self.transaction_type} of ${self.amount} at {self.timestamp.strftime('%Y-%m-%d %H:%M:%S')}"


class FraudAnalyst:
    def __init__(self, name):
        self.Name = name

    def review_customer(self, customer):
        suspicious = False

        # Check for any transaction over $10,000
        for txn in customer.transaction_history:
            if txn.amount > 10000:
                suspicious = True
                print(f"‚ö†Ô∏è Suspicious transaction detected: {txn}")
                break

        # Check for 5 rapid transactions within 60 seconds
        timestamps = [txn.timestamp for txn in customer.transaction_history]
        timestamps.sort()
        for i in range(len(timestamps) - 4):  # 5 transactions = 4 gaps
            time_diff = (timestamps[i + 4] - timestamps[i]).total_seconds()
            if time_diff < 60:
                suspicious = True
                print("‚ö†Ô∏è Rapid transactions detected.")
                break

        if suspicious:
            customer.is_flagged = True
            print(f"üîí {customer.Cust_name} has been flagged for review.")
        else:
            print(f"‚úÖ {customer.Cust_name} is clear.")

    def __str__(self):
        return f"Fraud Analyst Name: {self.Name}"


class BankingSystem:
    def __init__(self):
        self.customers = []
        self.analysts = []

    def add_customer(self, customer):
        self.customers.append(customer)
        print(f"Customer added: {customer.Cust_name}")

    def add_analyst(self, analyst):
        self.analysts.append(analyst)
        print(f"Fraud Analyst added: {analyst.Name}")

    def get_customer(self, account_number):
        return next((cust for cust in self.customers if cust.Account_number == account_number), None)

    def performing_transaction(self, account_number, transaction_type, amount):
        customer = self.get_customer(account_number)
        if not customer:
            print(f"Account {account_number} not found.")
            return
        if transaction_type.lower() == "deposit":
            customer.deposit(amount)
        elif transaction_type.lower() == "withdrawal":
            customer.withdrawal(amount)
        else:
            print("Unknown transaction type.")

    def review_all_customers(self):
        for analyst in self.analysts:
            for customer in self.customers:
                analyst.review_customer(customer)


bank_app = BankingSystem()

cust1 = Customer("Alice", "ACC123")
cust2 = Customer("Bob", "ACC456")
bank_app.add_customer(cust1)
bank_app.add_customer(cust2)

analyst1 = FraudAnalyst("Jordan")
bank_app.add_analyst(analyst1)

cust1.deposit(5000)
cust1.withdrawal(200)
cust1.deposit(15000)
cust2.deposit(100)
cust2.withdrawal(50)


for _ in range(6):
    cust2.deposit(10)

print("\nüîç Reviewing Customers:")
bank_app.review_all_customers()

print("\nüìä Customer Status:")
print(cust1)
print(cust2)